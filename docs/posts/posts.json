[
  {
    "path": "posts/2021-03-05-lgpd/",
    "title": "lgpd",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Leonardo Donato Nunes",
        "url": "https://github.com/LeonardoDonatoNunes"
      }
    ],
    "date": "2021-03-05",
    "categories": [],
    "contents": "\r\nDistill is a publication format for scientific and technical writing, native to the web.\r\nLearn more about using Distill at https://rstudio.github.io/distill.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-03-05T15:55:20-03:00",
    "input_file": "lgpd.utf8.md"
  },
  {
    "path": "posts/2021-03-05-postgis/",
    "title": "PostGIS",
    "description": "Criação de um Banco de Dados Espacial PostGIS com o R e Rstudio",
    "author": [
      {
        "name": "Leonardo Donato Nunes",
        "url": "https://github.com/LeonardoDonatoNunes"
      }
    ],
    "date": "2021-02-24",
    "categories": [
      "BD",
      "PostGIS",
      "R"
    ],
    "contents": "\r\n\r\n\r\n\r\nO PostGIS é uma extensão do PostgreSQL para armazenamento, gerenciamento, tratamento e análise de dados espaciais. Em comparação com um banco de dados padrão, que contém textos, números e datas, um banco de dados espacial contém tipos adicionais de dados para representar feições geográficas. Esses tipos de dados espaciais abstraem e encapsulam estruturas espaciais, como limite e dimensão. Em muitos aspectos, os tipos de dados espaciais podem ser entendidos simplesmente como formas. Os tipos de dados espaciais são organizados em uma hierarquia de tipos (Figura 1). Cada subtipo herda a estrutura (atributos) e o comportamento (métodos ou funções) de seu supertipo. A página do PostGIS contém uma documentação bem extensa para aprendizado. Também existe um manual em português.\r\n\r\n\r\n\r\nFigura 1. Hierarquia de feições geográficas. Imagem obtida e traduzida da página de introdução do PostGIS.\r\nOs bancos de dados comuns providenciam métodos de acessar os dados, conhecidos como index, que permitem acesso rápido a conjuntos aleatórios de dados. Indexar os dados padrão (texto, número, datas) é normalmente feito com B-tree índice, que particiona os dados em uma hierarquia natural ordenados em forma de árvore (tree) hierárquica. Porém o indice B-tree não pode ser facilmente usado para feições geométricas, para isso o índice usado é o spacial index, que tenta identificar que tipo de feição está dentro de cada “caixa” (retângulo com a extensão da feição).\r\nNeste documento, irei criar um banco de dados geográficos PostGIS e adicionar uma tabela com dados espaciais. Os códigos SQL serão enviados ao PostgreSQL através do R, com a função dbGetQuery do pacote RPostgreSQL\r\nBreve introdução ao RPostgreSQL\r\nAntes de começar a falar de PostGIS, segue uma breve introdução ao funcionamento do RPostgreSQL.\r\nO primeiro passo é criar uma conexão com o banco de dados que vamos trabalhar, neste exemplo usarei o BD criado quando o Postgres é instalado. Tmabém usei a senha e usuário padrões.\r\nCarregar os pacotes\r\n\r\n\r\nlibrary(rpostgis)\r\nlibrary(raster)\r\nlibrary(rgdal)\r\nlibrary(RPostgreSQL)\r\n\r\n\r\n\r\nCria um driver Postgres\r\n\r\n\r\ndrv <- dbDriver(\"PostgreSQL\")\r\n\r\n\r\n\r\nCriando a conexão com o servidor\r\n\r\n\r\ncon <- dbConnect(drv,\r\n                 dbname = \"postgres\",\r\n                 host = \"localhost\",\r\n                 port = 5432, \r\n                 user = \"postgres\",\r\n                 password =  \"postgres123\") \r\n\r\n\r\n\r\nFunções do RPostgreSQL\r\nO pacote possui algums funções para acessar e criar tabelas do BD.\r\nSeguem alguns exemplos:\r\nPara listar as tabelas do BD\r\n\r\n\r\ndbListTables(con)\r\n\r\n\r\n [1] \"investidor\"                     \"investimento\"                  \r\n [3] \"startup\"                        \"cidade\"                        \r\n [5] \"obitos\"                         \"escolaridade\"                  \r\n [7] \"estado_civil\"                   \"public.nova_tabela\"            \r\n [9] \"nova_tabel\"                     \"public.nova_tabela_2\"          \r\n[11] \"nova_tabela_2\"                  \"spatial_ref_sys\"               \r\n[13] \"public.tabela_coordenadas\"      \"public.tabela_coordenada\"      \r\n[15] \"tabela_coordenadas\"             \"area\"                          \r\n[17] \"obitos_brasil_sim.escolaridade\" \"obitos_brasil_sim.est_civil\"   \r\n[19] \"public.area\"                   \r\n\r\nListar os campos em uma tabela específica\r\n\r\n\r\ndbListFields(conn = con, name = \"investimento\")\r\n\r\n\r\n[1] \"id\"             \"startup_id\"     \"investidor_id\" \r\n[4] \"valor\"          \"data_realizada\" \"obs\"           \r\n\r\nCarregra uma tabela do BD\r\n\r\n\r\ninvestimento <- dbReadTable(con, \"investimento\")\r\nhead(investimento, 3)\r\n\r\n\r\n  id startup_id investidor_id     valor data_realizada  obs\r\n1  1          1             1 200000000     2020-01-09 <NA>\r\n2  2          2             2   8048394     2020-01-13 <NA>\r\n3  3          3             3  18358860     2020-01-09 <NA>\r\n\r\nPara inserir uma nova tabela no BD, desta vez eu expecifiquei qual schema a tabela será criada. No argumento “nome”: c(“schema”,“tabela”).\r\n\r\n\r\nnova_tabela <- data.frame(\"id\" = 1:5, nomes = LETTERS[1:5])\r\ndbWriteTable(con, name =c(\"public\", \"nova_tabela\"), value = nova_tabela)\r\n\r\n\r\n[1] TRUE\r\n\r\ndbReadTable(con, name = c(\"public\", \"nova_tabela\"))\r\n\r\n\r\n  id nomes\r\n1  1     A\r\n2  2     B\r\n3  3     C\r\n4  4     D\r\n5  5     E\r\n\r\nUma outra maneira de fazer consultas é enviando uma SQL Query:\r\nPara excluir uma tabela do BD\r\n\r\n\r\ndbGetQuery(conn = con, statement = \"DROP TABLE IF EXISTS public.nova_tabela ;\")\r\n\r\n\r\ndata frame with 0 columns and 0 rows\r\n\r\nPara selecionar uma tabela\r\n\r\n\r\ndbGetQuery(conn = con, statement = \"SELECT * FROM investimento LIMIT 3;\")\r\n\r\n\r\n  id startup_id investidor_id     valor data_realizada  obs\r\n1  1          1             1 200000000     2020-01-09 <NA>\r\n2  2          2             2   8048394     2020-01-13 <NA>\r\n3  3          3             3  18358860     2020-01-09 <NA>\r\n\r\nPara criar uma tabela no BD\r\n\r\n\r\ndbGetQuery(conn = con, statement = \"DROP TABLE IF EXISTS public.nova_tabela_2;\")\r\n\r\n\r\ndata frame with 0 columns and 0 rows\r\n\r\ndbGetQuery(conn = con, statement = \"CREATE TABLE public.nova_tabela_2(\r\n           id integer,\r\n           nomes varchar\r\n           );\")\r\n\r\n\r\ndata frame with 0 columns and 0 rows\r\n\r\nPara inserir dados na tabela criada\r\n\r\n\r\ndbWriteTable(con, \"nova_tabela_2\", nova_tabela, row.names=FALSE, append=TRUE)\r\n\r\n\r\n[1] TRUE\r\n\r\nViualizas as linhas inseridas\r\n\r\n\r\ndbGetQuery(conn = con, statement = \"SELECT * FROM nova_tabela_2;\")\r\n\r\n\r\n  id nomes\r\n1  1     A\r\n2  2     B\r\n3  3     C\r\n4  4     D\r\n5  5     E\r\n\r\nDesconectar do bd\r\n\r\n\r\ndbDisconnect(con)\r\n\r\n\r\n[1] TRUE\r\n\r\nCriando a extensão PostGIS\r\nCarregar o pacote\r\n\r\n\r\nlibrary(\"RPostgreSQL\")\r\n\r\n\r\n\r\nCria um driver Postgres\r\n\r\n\r\ndrv <- dbDriver(\"PostgreSQL\")\r\n\r\n\r\n\r\nCriando a conexão com o servidor\r\n\r\n\r\ncon <- dbConnect(drv,\r\n                 dbname = \"postgres\",\r\n                 host = \"localhost\",\r\n                 port = 5432, \r\n                 user = \"postgres\",\r\n                 password =  \"postgres123\") \r\n\r\n\r\n\r\nCria a extensão:\r\n\r\n\r\ndbGetQuery(conn = con, statement = \"CREATE EXTENSION postgis;\")\r\n\r\n\r\n\r\nPara carregar dados de uma tabela contendo coordenadas e armazenar estes dados como feição no BD primeiro é preciso criar uma função no SQL para criar a geomeria.\r\nAbaixo criei um schema de funções e uma função para criar uma feição do tipo ponto sempre que um novo registro contendo campos de lon (longitude) e lat (latitude forem adicionados)\r\n\r\n\r\ndbGetQuery(conn = con, statement = \"CREATE SCHEMA funcoes;\")\r\n\r\ndbGetQuery(conn = con, statement = \"CREATE OR REPLACE FUNCTION \r\nfuncoes.create_geom_points()\r\nRETURNS trigger AS \r\n$BODY$\r\nDECLARE\r\n  thegeom geometry;\r\nBEGIN\r\n\r\nIF NEW.lon IS NOT NULL AND NEW.lat IS NOT NULL THEN\r\n  thegeom = ST_SetSRID(ST_MakePoint(NEW.lon, NEW.lat),4326);\r\n  NEW.geom = thegeom;\r\nEND IF;\r\n\r\nRETURN NEW;\r\nEND;$BODY$\r\nLANGUAGE plpgsql VOLATILE\r\nCOST 100;\r\nCOMMENT ON FUNCTION funcoes.create_geom_points()\r\nIS 'When called by a trigger (insert_lon_lat) \r\nthis function populates the field geom \r\nusing the values from lon and lat fields.';\")\r\n\r\n\r\n\r\nCriar uma tabela contendo pontos com coordenadas\r\n\r\n\r\ntabela_coordenadas <- data.frame(id = 1:5, \r\n              lon = c(-48.08534, -48.02049,-48.01342,-47.87874,-47.90576), \r\n              lat = c(-20.67190, -20.63615,-20.75088,-20.76834,-20.67439))\r\n\r\n\r\n\r\nCria a tabela no BD e executa a função “create_geom_points()”\r\n\r\n\r\ndbGetQuery(con, \"DROP TABLE IF EXISTS public.tabela_coordenadas CASCADE;\")\r\n\r\n\r\ndata frame with 0 columns and 0 rows\r\n\r\ndbGetQuery(con, \"CREATE TABLE public.tabela_coordenadas(\r\nid integer,\r\nlon double precision,\r\nlat double precision,\r\ngeom geometry(Point, 4326));\")\r\n\r\n\r\ndata frame with 0 columns and 0 rows\r\n\r\ndbGetQuery(con, \"CREATE TRIGGER inserir_lon_lat\r\n           BEFORE INSERT\r\n           ON public.tabela_coordenadas\r\n           FOR EACH ROW\r\n           EXECUTE PROCEDURE funcoes.create_geom_points();\")\r\n\r\n\r\ndata frame with 0 columns and 0 rows\r\n\r\ndbWriteTable(con, c(\"public\", \"tabela_coordenadas\"), tabela_coordenadas, row.names=FALSE, append=TRUE)\r\n\r\n\r\n[1] TRUE\r\n\r\nObserve que agora foi criada uma feição\r\n\r\n\r\ndbGetQuery(con, \"SELECT * FROM public.tabela_coordenadas;\")\r\n\r\n\r\n  id       lon       lat\r\n1  1 -48.08534 -20.67190\r\n2  2 -48.02049 -20.63615\r\n3  3 -48.01342 -20.75088\r\n4  4 -47.87874 -20.76834\r\n5  5 -47.90576 -20.67439\r\n                                                geom\r\n1 0101000020E61000003485CE6BEC0A48C0B22E6EA301AC34C0\r\n2 0101000020E610000091F2936A9F0248C0B459F5B9DAA234C0\r\n3 0101000020E6100000618E1EBFB70148C07138F3AB39C034C0\r\n4 0101000020E6100000F1D7648D7AF047C0693524EEB1C434C0\r\n5 0101000020E6100000320395F1EFF347C0DBBFB2D2A4AC34C0\r\n\r\nEsses dados podem ser usados direto no QGIS, acessando o BD, ou vizualizados no pgAdmin.\r\nPara inserir um arquivo no formato Shapefile:\r\nCarregar um arquivo .shp\r\n\r\n\r\narea <- shapefile(\"C:\\\\Users\\\\user\\\\Documents\\\\area.shp\")\r\n\r\n\r\n\r\nInserir o arquivo .shp no BD\r\n\r\n\r\npgInsert(con, c(\"public\",\"area\"), area, new.id = \"gid\")\r\n\r\n\r\n[1] TRUE\r\n\r\nPara obter as feições do BD pode ser utilizada a função “pgGetGeom”\r\n\r\n\r\narea <- pgGetGeom(con, c(\"public\",\"area\"))\r\npontos <- pgGetGeom(con, c(\"public\",\"tabela_coordenadas\"))\r\n\r\n\r\n\r\n\r\nBrasil, 24 de Fevereiro de 2021\r\n\r\nBack to top\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-03-05-postgis/postgis_files/figure-html5/unnamed-chunk-1-1.png",
    "last_modified": "2021-03-05T15:49:38-03:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-03-05-imagementrada/",
    "title": "Imagem de entrada",
    "description": "Descreve a imagem de entrada da pagina inicial.",
    "author": [
      {
        "name": "Leonardo Donato Nunes",
        "url": "https://github.com/LeonardoDonatoNunes"
      }
    ],
    "date": "2021-02-16",
    "categories": [
      "GGplot2",
      "R",
      "Visualizacao"
    ],
    "contents": "\r\nA imagem da entrada foi pensada para ilustrar minha página pessoal. O objetivo foi estabelecer a relação entre a ciência de dados, a matemática e a visualização de dados, destaques que pretendo dar ao site.\r\nA imagem é um ggplot de uma função de onda. Para isso, criei uma sequencia de dados que chamei de ‘x’ e criei outras duas variáveis ‘y’ e ‘z’, que são o resultado de diferentes funções. As funções foram anotadas no próprio gráfico de acordo com a cor da linha que ela representa.\r\nPacotes utilizados\r\n\r\n\r\nlibrary(ggplot2)\r\nlibrary(ggthemes)\r\nlibrary(extrafont)\r\nloadfonts(device = \"win\")\r\n\r\n\r\n\r\nCriação dos dados\r\n\r\n\r\nx = 1:1000\r\ny =  cos(2*pi*(1/2 - x/500))\r\nz =  cos(2*pi*(1/2 - x/250))\r\nlegenda_x <- \"cos(2 * pi * (frac(1,2) - frac(x,lambda)))\"\r\nlegenda_z <- \"cos(2 * pi * (frac(1,2) - frac(x,lambda)))\"\r\n\r\n\r\n\r\nElaboração do gráfico\r\n\r\n\r\n       ggplot(data = NULL) +\r\n   \r\n                geom_point(aes(x = 100, y = 1.6), col = \"transparent\") +\r\n                geom_point(aes(x = 100, y = -1.5), col = \"transparent\") +\r\n \r\n                geom_line(aes(x = x, y = y), lwd = 1.2, \r\n                          col = ifelse(x > 350 & x < 650,\r\n                                       alpha(\"purple\", alpha = 0.3), \r\n                                       alpha(\"purple\", alpha = 0.7))) +\r\n                geom_text(aes(x = 900, y = -1.2, label = legenda_x), \r\n                          parse = TRUE, col = alpha(\"purple\", alpha = 0.5), size = 8) +\r\n                \r\n                geom_line(aes(x = x, y = z), lwd = 1.2, \r\n                          col = ifelse(x > 350 & x < 650,\r\n                                       alpha(\"#408546\", alpha = 0.3), \r\n                                       alpha(\"#408546\", alpha = 0.7))) +\r\n                geom_text(aes(x = 100, y = 1.4, label = legenda_z), parse = TRUE,\r\n                          col = alpha(\"#408546\", alpha = 0.7), size = 8) +\r\n                \r\n                annotate(\"text\", x = 500, y = 0, label = \"> LDN \\n + DS\",\r\n                         size = 28, family = \"Eras Bold ITC\", col = \"#236336\") +\r\n                \r\n                theme_map()\r\n\r\n\r\n\r\n\r\n\r\nBack to top\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-03-05-imagementrada/imagementrada_files/figure-html5/figura_entrada_post-1.png",
    "last_modified": "2021-03-05T15:45:13-03:00",
    "input_file": {}
  }
]
